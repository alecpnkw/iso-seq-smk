from snakemake.utils import min_version
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
min_version("6.0")

configfile: "config/config.yaml"

samples = pd.read_csv(config["samples"], sep = ',').set_index("sample", drop=False)

#TALON module
module TALON:
    snakefile:
        github("alecpnkw/talon-smk-module", path="workflow/Snakefile", branch="master")
    config: 
        config #specify config here if you only want particular fields passed 

#targeting...
rule all:
    input:
        #outputs from TALON... 
        expand("results/plots/{dataset}_length_hist.png", dataset = samples["dataset"]),
        expand("results/{dataset}_talon.gtf", dataset = samples["dataset"]),
        expand("results/labeled/{sample}_labeled.sam", sample = samples.index)

#import rules
use rule * from TALON as TALON_*

rule minimap2_sam:
    input:
        target=config["reference"], # can be either genome index or genome fasta
        query="resources/flnc/{sample}.fastq"
    output:
        "results/aligned/{sample}.sam"
    log:
        "results/logs/minimap2/{sample}.log"
    params:
        extra="-x map-pb",           # optional
        sorting="none",                 # optional: Enable sorting. Possible values: 'none', 'queryname' or 'coordinate'
        sort_extra=""                # optional: extra arguments for samtools/picard
    threads: 3
    wrapper:
        "0.78.0/bio/minimap2/aligner"

rule length_hist: 
    input:
        "results/{dataset}_talon_abundance_filtered.tsv"
    output:
        "results/plots/{dataset}_length_hist.png"
    run:
        models = pd.read_csv(input[0], sep = '\t')
        nbins = 20
        fig, ax = plt.subplots()
        n, bins, patches = ax.hist(models.length, nbins, alpha = 0.5)
        ax.set_xlabel("model length")
        ax.set_ylabel("model count")
        fig.savefig(output[0], dpi = 200)
        